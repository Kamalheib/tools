#!/usr/bin/env python

import re
import sys
from git import Repo
from argparse import ArgumentParser

SEARCH_PATHS = {
	'ib_core': [
	'include/rdma/',
	'drivers/infiniband/core/',
	'drivers/infiniband/ulp/ipoib'
	'include/uapi/rdma/ib_user_verbs.h',
	],

	'mlx4' : [
	'drivers/net/mlx4/',
	'include/linux/mlx4/',
	'drivers/infiniband/hw/mlx4/',
	'drivers/net/ethernet/mellanox/mlx4/',
	],

	'mlx5' : [
	'drivers/net/mlx5/',
	'include/linux/mlx5/',
	'drivers/infiniband/hw/mlx5/',
	'drivers/net/ethernet/mellanox/mlx5/',
	],

	'srp' : [
	'drivers/infiniband/ulp/srp/',
	'include/scsi/srp.h',
	]
}

PICK_RGEX_LIST = [
	"cherry picked from commit ([0-9a-f]+)",
	"Cherry picked from commit ([0-9a-f]+)",
	"cherry picked from ([0-9a-f]+)",
	"Cherry picked from ([0-9a-f]+)",
	"upstream commit: ([0-9a-f]+)",
	"Upstream commit: ([0-9a-f]+)",
	"upstream commit ([0-9a-f]+)",
	"Upstream commit ([0-9a-f]+)",
	"upstream: ([0-9a-f]+)",
	"Upstream: ([0-9a-f]+)",
	"commit ([0-9a-f]+)",
	"Commit ([0-9a-f]+)"
]

IGNORE_COMMITS = [
]

IGNORE_UPSTREAM_COMMITS = [
]

class git_change_log(object):

	def get_parser(self):
		if not hasattr(self, 'parser'):
			self.parser = ArgumentParser()
		return self.parser

	def parse_args(self, args):
		self.Parser.add_argument('-o', '--old_range', help='Old kernel range of commits', required=True)
		self.Parser.add_argument('-u', '--upstream_range', help='Upstream kernel range of commits', required=True)
		self.Parser.add_argument('--old_kernel_path', help='Path to old kernel tree', required=True)
		self.Parser.add_argument('--upstream_kernel_path', help='Path to upsream kernel tree', required=True)
		self.Parser.add_argument('--dirs', help='list of directorys to search for changes', nargs='+', choices=['mlx4', 'mlx5', 'ib_core'], default=['mlx4', 'mlx5', 'ib_core'])
		self.Parser.add_argument('--debug', help="enable debug prints", action="store_true")

		self.Parser.parse_args(namespace=self, args=args)

	def get_old_repo(self):
		if not hasattr(self, 'old_repo'):
			self.old_repo = Repo(self.old_kernel_path)
		return self.old_repo

	def get_upstream_repo(self):
		if not hasattr(self, 'upstream_repo'):
			self.upstream_repo = Repo(self.upstream_kernel_path)
		return self.upstream_repo

	def get_included_commits(self):
		if not hasattr(self, 'included_commits_set'):
			self.included_commits_set = set()

			for commit in self.OldRepo.iter_commits(self.old_range, paths=self.MLX_PATHS):
				match = None
				for regex in PICK_RGEX_LIST:
					match = re.search(regex, commit.message)
					if match:
						break

				if match:
					if self.debug:
						print "Found:", commit
					ignore = False
					for msg in IGNORE_COMMITS:
						if msg in commit.summary:
							ignore = True
							break

					if ignore:
						continue

					upstream_commit = self.UpstreamRepo.commit(match.group(1))
					self.included_commits_set.add(upstream_commit.hexsha)
				else:
					if self.debug:
						print "Not found:", commit

		return self.included_commits_set

	def get_upstream_commits(self):
		if not hasattr(self, 'upstream_commits_set'):
			self.upstream_commits_set = set()

			for commit in self.UpstreamRepo.iter_commits(self.upstream_range, paths=self.MLX_PATHS, no_merges=True):
				ignore = False
				for ignore_commit in IGNORE_UPSTREAM_COMMITS:
					if ignore_commit in commit.summary:
						ignore = True
						break
				if ignore:
					continue
				self.upstream_commits_set.add(commit.hexsha)

		return self.upstream_commits_set

	def get_not_included_commits(self):

		not_inclueded_commits = self.UpstreamCommits - self.IncludedCommits

		for commit in self.UpstreamRepo.iter_commits(self.upstream_range, paths=self.MLX_PATHS, no_merges=True, reverse=True):
			if commit.hexsha in not_inclueded_commits:
				msg = "%s # %s" % (commit, commit.summary)

				for c_f in commit.stats.files:
					found = False
					for f in self.MLX_PATHS:
						if f in str(c_f):
							found = True
							break

					if not found:
						msg = "%s # GENERIC %s" % (commit, commit.summary)
						break

				print msg

	def build_mlx_paths(self):
		self.MLX_PATHS = []
		for directory in self.dirs:
			self.MLX_PATHS += SEARCH_PATHS[directory]

	def execute(self, args):
		self.parse_args(args)
		self.build_mlx_paths()

		self.get_not_included_commits()

	Parser = property(get_parser)
	OldRepo = property(get_old_repo)
	UpstreamRepo = property(get_upstream_repo)
	IncludedCommits = property(get_included_commits)
	UpstreamCommits = property(get_upstream_commits)

if __name__ == '__main__':
	change_log = git_change_log()
	change_log.execute(sys.argv[1:])
