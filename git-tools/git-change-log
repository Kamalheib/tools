#!/usr/bin/env python

"""
Tools Project
Copyright(c) 2017 Tools

This program is free software; you can redistribute it and/or modify it
under the terms and conditions of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.

The full GNU General Public License is included in this distribution in
the file called "COPYING".

Contact Information:
Kamal Heib <kamalheib1@gmail.com>
"""

import re
import sys
from argparse import ArgumentParser

try:
    from git import Repo
except ImportError:
    print("Please Install GitPython Package (e.g. dnf install GitPython)")
    sys.exit(1)

SEARCH_PATHS = {
        'core': [
            'include/uapi/linux/if_infiniband.h',
            'Documentation/infiniband',
            'drivers/infiniband/Makefile',
            'drivers/infiniband/Kconfig',
            'drivers/infiniband/core/',
            'include/rdma/',
            'include/uapi/rdma/',
            ],
        'drivers': [
            'drivers/infiniband/sw/rxe',
            'drivers/infiniband/sw/siw',
            'drivers/infiniband/sw/rdmavt',
            'drivers/infiniband/hw/vmw_pvrdma',
            'drivers/infiniband/hw/efa',
            'drivers/infiniband/hw/hfi1',
            'drivers/infiniband/hw/irdma',
            'drivers/infiniband/hw/usnic',
            ],
        'ulps': [
            'drivers/infiniband/ulp/ipoib/',
            'drivers/infiniband/ulp/opa_vnic',
            'drivers/infiniband/ulp/iser/',
            'drivers/infiniband/ulp/isert/',
            'drivers/infiniband/ulp/srp/',
            'drivers/scsi/scsi_transport_srp.c',
            'include/scsi/scsi_transport_srp.h',
            'drivers/infiniband/ulp/srpt/',
            'drivers/scsi/scsi_transport_srp.c',
            'include/scsi/scsi_transport_srp.h',
            ],
        'efa': [
            'drivers/infiniband/hw/efa/',
            'include/uapi/rdma/efa-abi.h',
            ],
        'bnxt_re': [
            'drivers/infiniband/hw/bnxt_re/',
            'include/uapi/rdma/bnxt_re-abi.h',
            ],
        'irdma': [
            'drivers/infiniband/hw/irdma/',
            'include/uapi/rdma/irdma-abi.h',
            ],
        'cxgb4': [
            'drivers/infiniband/hw/cxgb4/',
            'include/uapi/rdma/cxgb4-abi.h',
            ],
        'hfi1' : [
            'drivers/infiniband/hw/hfi1',
            'drivers/infiniband/sw/rdmavt',
            'include/uapi/rdma/hfi/'
            ],
        'mana_ib' : [
            'drivers/infiniband/hw/mana',
            'include/uapi/rdma/mana-abi.h'
        ],
        'qedr' : [
            'drivers/infiniband/hw/qedr',
            'include/uapi/rdma/qedr-abi.h'
            'drivers/net/ethernet/qlogic/qed/'
        ],
        'vmw_pvrdma' : [
            'drivers/infiniband/hw/vmw_pvrdma',
            'include/uapi/rdma/vmw_pvrdma-abi.h'
        ],
        'i40e' : [
            'drivers/net/ethernet/intel/i40e/',
        ],
        'octeon_ep' : [
                'drivers/net/ethernet/marvell/octeon_ep',
                'drivers/net/ethernet/marvell/octeon_ep_vf',
        ],
}

PICK_RGEX_LIST = [
    "cherry picked from commit ([0-9a-f]+)",
    "Cherry picked from commit ([0-9a-f]+)",
    "cherry picked from ([0-9a-f]+)",
    "Cherry picked from ([0-9a-f]+)",
    "upstream commit: ([0-9a-f]+)",
    "Upstream commit: ([0-9a-f]+)",
    "upstream commit ([0-9a-f]+)",
    "Upstream commit ([0-9a-f]+)",
    "upstream: ([0-9a-f]+)",
    "Upstream: ([0-9a-f]+)",
    "commit (([0-9a-f]+){10})",
    "Commit ([0-9a-f]+)"
]

IGNORE_COMMITS = [
]

IGNORE_UPSTREAM_COMMITS = [
]


class git_change_log(object):
    def __init__(self):
        self._parser = ArgumentParser()

    @property
    def parser(self):
        return self._parser

    def parse_args(self, args):
        self.parser.add_argument('-o', '--old_range', help='Old kernel range of commits', required=True)
        self.parser.add_argument('-u', '--upstream_range', help='Upstream kernel range of commits', required=True)
        self.parser.add_argument('-l', '--old_kernel_path', help='Path to old kernel tree', required=True)
        self.parser.add_argument('-p', '--upstream_kernel_path', help='Path to upsream kernel tree', required=True)
        self.parser.add_argument('--dirs', help='list of directorys to search for changes', nargs='+',
                                 choices=SEARCH_PATHS.keys(), default=[ 'core', 'drivers', 'ulps'])
        self.parser.add_argument('--debug', help="enable debug prints", action="store_true")
        self.parser.add_argument('--fixes', help="enable find fixes commit only", action="store_true", default=False)

        self.parser.parse_args(namespace=self, args=args)

    def get_old_repo(self):
        if not hasattr(self, 'old_repo'):
            self.old_repo = Repo(self.old_kernel_path)
        return self.old_repo

    def get_upstream_repo(self):
        if not hasattr(self, 'upstream_repo'):
            self.upstream_repo = Repo(self.upstream_kernel_path)
        return self.upstream_repo

    def get_included_commits(self):
        if not hasattr(self, 'included_commits_set'):
            self.included_commits_set = set()

            for commit in self.OldRepo.iter_commits(self.old_range, paths=self.RDMA_PATHS, no_merges=True):
                match = None
                for regex in PICK_RGEX_LIST:
                    match = re.search(regex, commit.message)
                    if match:
                        revert = "This reverts commit %s" % match.group(1)
                        if revert in commit.message:
                            if self.debug:
                                print("Ignore:", commit)
                            continue
                        else:
                            break

                if match:
                    if self.debug:
                        print("Found:", commit)
                        print(regex)
                    ignore = False
                    for msg in IGNORE_COMMITS:
                        if msg in commit.message:
                            ignore = True
                            break

                    if ignore:
                        print("Ignore:", commit)
                        continue

                    upstream_commit = self.UpstreamRepo.commit(match.group(1))
                    self.included_commits_set.add(upstream_commit.hexsha)
                else:
                    if self.debug:
                        print("Not found:", commit)


        return self.included_commits_set

    def get_upstream_commits(self):
        if not hasattr(self, 'upstream_commits_set'):
            self.upstream_commits_set = set()

            for commit in self.UpstreamRepo.iter_commits(self.upstream_range, paths=self.RDMA_PATHS, no_merges=True):
                ignore = False
                for ignore_commit in IGNORE_UPSTREAM_COMMITS:
                    if ignore_commit in commit.summary:
                        ignore = True
                        break
                if ignore:
                    continue
                if self.fixes:
                    if "Fixes:" not in commit.message:
                        continue
                self.upstream_commits_set.add(commit.hexsha)

        return self.upstream_commits_set

    def get_not_included_commits(self):

        not_inclueded_commits = self.UpstreamCommits - self.IncludedCommits

        for commit in self.UpstreamRepo.iter_commits(self.upstream_range, paths=self.RDMA_PATHS, no_merges=True,
                                                     reverse=True):
            if commit.hexsha in not_inclueded_commits:
                msg = "%s # %s" % (commit, commit.summary)
                print(msg)

    def build_paths(self):
        self.RDMA_PATHS = []
        for directory in self.dirs:
            self.RDMA_PATHS += SEARCH_PATHS[directory]

    def execute(self, args):
        self.parse_args(args)
        self.build_paths()

        self.get_not_included_commits()
        self.OldRepo.close()
        self.UpstreamRepo.close()

    OldRepo = property(get_old_repo)
    UpstreamRepo = property(get_upstream_repo)
    IncludedCommits = property(get_included_commits)
    UpstreamCommits = property(get_upstream_commits)


if __name__ == '__main__':
    change_log = git_change_log()
    change_log.execute(sys.argv[1:])
