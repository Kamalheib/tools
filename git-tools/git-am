#!/usr/bin/env python

import os
import sys
from argparse import ArgumentParser

class am(object):

	def get_parser(self):
		if not hasattr(self, 'parser'):
			self.parser = ArgumentParser()
		return self.parser

	def parse_args(self, args):
		self.Parser.add_argument('-p', '--path', help='path to the patches dir', required=True)
		self.Parser.parse_args(namespace=self, args=args)

	def open_files(self):
		if not hasattr(self, 'patches_file'):
			self.patches_file = open(self.path)
			self.tmp_patches_file = open(self.path + '.tmp', 'w')

	def close_files(self):
		if hasattr(self, 'patches_file'):
			self.patches_file.close()
		if hasattr(self, 'tmp_patches_file'):
			self.tmp_patches_file.close()

	def override_patches_file(self):
		os.system('mv %s %s' % (self.path + ".tmp", self.path))

	def am_patches(self):
		for line in self.patches_file:
			print(line.strip())

			if line.startswith('#'):
				self.tmp_patches_file.write(line)
				continue

			rc = os.system('git am -s -3 %s' % line.strip())
			if rc:
				print("Failed to am (%s)" % line.strip())
				self.tmp_patches_file.write(line)
				break
			else:
				self.tmp_patches_file.write("#" + line)

		for line in self.patches_file:
			self.tmp_patches_file.write(line)

	def execute(self, args):
		self.parse_args(args)
		self.open_files()
		self.am_patches()
		self.close_files()
		self.override_patches_file()

	Parser = property(get_parser)

if __name__ == '__main__':
	am_obj = am()
	am_obj.execute(sys.argv[1:])
