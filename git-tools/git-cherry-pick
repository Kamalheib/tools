#!/usr/bin/env python

"""
Tools Project
Copyright(c) 2017 Tools

This program is free software; you can redistribute it and/or modify it
under the terms and conditions of the GNU General Public License,
version 2, as published by the Free Software Foundation.

This program is distributed in the hope it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program.  If not, see <http://www.gnu.org/licenses/>.

The full GNU General Public License is included in this distribution in
the file called "COPYING".

Contact Information:
Kamal Heib <kamalheib1@gmail.com>
"""

import re
import os
import sys
from argparse import ArgumentParser


class cherry_pick(object):
    def get_parser(self):
        if not hasattr(self, 'parser'):
            self.parser = ArgumentParser()

        return self.parser

    def parse_args(self, args):
        self.Parser.add_argument('-p', '--path', help='path to git log file', required=True)

        self.Parser.parse_args(namespace=self, args=args)

    def open_files(self):
        if not hasattr(self, 'log_file'):
            self.log_file = open(self.path)
            self.tmp_log_file = open(self.path + ".tmp", 'w')

    def close_files(self):

        if hasattr(self, 'tmp_log_file'):
            self.tmp_log_file.close()

        if hasattr(self, 'log_file'):
            self.log_file.close()

    def override_log_file(self):

        os.system("mv %s %s" % (self.path + ".tmp", self.path))

    def cherry_pick_commits(self):

        for line in self.log_file:
            print line.strip()

            if line.startswith("#"):
                self.tmp_log_file.write(line)
                continue

            if "EXIT-HERE" in line:
                break

            match = re.search("(^[0-9a-f]+) [^:]*: (.*)", line.strip())
            if match:
                commit_id, header = match.groups()
            else:
                print "-E- Failed to parse line: %s" % line.strip()
                break

            rc = os.system('git cherry-pick -x -s %s' % commit_id)
            if rc:
                self.tmp_log_file.write(line)
                print "-E- Failed cherry-pick commit %s" % line.strip()
                print "-I Searching for commit %s" % header
                os.system("git log --pretty=oneline | grep '%s'" % header)
                break
            else:
                self.tmp_log_file.write("#" + line)

        for line in self.log_file:
            self.tmp_log_file.write(line)

    def execute(self, args):
        self.parse_args(args)
        self.open_files()
        self.cherry_pick_commits()
        self.close_files()
        self.override_log_file()

    Parser = property(get_parser)


if __name__ == '__main__':
    cherry_pick_obj = cherry_pick()
    cherry_pick_obj.execute(sys.argv[1:])
